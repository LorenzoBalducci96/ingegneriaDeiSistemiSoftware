/* Generated by AN DISI Unibo */ 
package it.unibo.robotmind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotmind ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.robot.roomState.create(myself)
						solve("consult('initialRoomState.pl')","") //set resVar	
						solve("cleanDishesInPantry(DISHES)","") //set resVar	
						itunibo.robot.roomState.setcleanDishesInPantry( getCurSol("DISHES").toString()  )
						solve("dishwasherDishes(DISHES)","") //set resVar	
						itunibo.robot.roomState.setdishwasherDishes( getCurSol("DISHES").toString()  )
						solve("foodOnTable(FOOD_ID,DESCRIPTION,QT)","") //set resVar	
						println("foodId = ${getCurSol("FOOD_ID")}")
						println("description = ${getCurSol("DESCRIPTION")}")
						println("qt = ${getCurSol("QT")}")
						itunibo.robot.roomState.addFoodOnTable( getCurSol("FOOD_ID").toString(), getCurSol("DESCRIPTION").toString(), getCurSol("QT").toString()  )
						solve("consult('prepare_configuration.pl')","") //set resVar	
						solve("defaultDishesInDishwasherToTake(DISHES)","") //set resVar	
						itunibo.robot.roomState.setdefaultDishwasherDishesToTake( getCurSol("DISHES").toString()  )
						solve("foodToPut(FOOD_ID,DESCRIPTION,QT)","") //set resVar	
						println("foodId = ${getCurSol("FOOD_ID")}")
						println("description = ${getCurSol("DESCRIPTION")}")
						println("qt = ${getCurSol("QT")}")
						itunibo.robot.roomState.adddefaultFoodToTakeFromFridge( getCurSol("FOOD_ID").toString(), getCurSol("DESCRIPTION").toString(), getCurSol("QT").toString()  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t06",targetState="handleMaitreCmd",cond=whenEvent("maitreCmd"))
					transition(edgeName="t07",targetState="handleFridgeRequest",cond=whenEvent("fridgeRequest"))
					transition(edgeName="t08",targetState="handleRecvFoodMsgEvent",cond=whenEvent("recvFoodMsgEvent"))
					transition(edgeName="t09",targetState="handleRoomStateRequest",cond=whenEvent("roomStateRequest"))
					transition(edgeName="t010",targetState="handleRoomStateEvent",cond=whenEvent("roomStateEvent"))
					transition(edgeName="t011",targetState="sendMaitreWarning",cond=whenDispatch("foodUnavailable"))
					transition(edgeName="t012",targetState="handleRemoveFromFridge",cond=whenDispatch("removeFromFridge"))
					transition(edgeName="t013",targetState="handleAddToFridge",cond=whenDispatch("addToFridge"))
				}	 
				state("handleRemoveFromFridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("removeFromFridge(FOOD_ID,QT)"), Term.createTerm("removeFromFridge(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("removeFromFridge", "removeFromFridge(${payloadArg(0)},${payloadArg(1)})" ,"externalcomunicator" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleAddToFridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("addToFridge", "addToFridge(${payloadArg(0)}," + "\"${payloadArg(1)}\",${payloadArg(2)})" ,"externalcomunicator" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleRoomStateEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("roomStateEvent(X)"), Term.createTerm("roomStateEvent(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("roomStateEvent", "roomStateEvent(${payloadArg(0)})" ,"frontend" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleRoomStateRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("roomStateRequest(X)"), Term.createTerm("roomStateRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.roomState.emitRoomState(  )
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleFridgeRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fridgeRequest(X)"), Term.createTerm("fridgeRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("fridgeRequest", "fridgeRequest(${payloadArg(0)})" ,"externalcomunicator" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleRecvFoodMsgEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("recvFoodMsgEvent(X)"), Term.createTerm("recvFoodMsgEvent(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("recvFoodMsgEvent", "recvFoodMsgEvent(${payloadArg(0)})" ,"frontend" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleMaitreCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("maitreCmd(X)"), Term.createTerm("maitreCmd(ACTION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								var isAdd = "${payloadArg(0)}".startsWith("a_", true)
								if(isAdd){ forward("fridgeRequest", "fridgeRequest(${payloadArg(0)})" ,"externalcomunicator" ) 
								 }
								else
								 { forward("executePlanningProject", "executePlanningProject(${payloadArg(0)})" ,"planner" ) 
								  }
						}
					}
					 transition(edgeName="t014",targetState="okPlan",cond=whenDispatch("foodAvailable"))
					transition(edgeName="t015",targetState="sendMaitreWarning",cond=whenDispatch("foodUnavailable"))
					transition(edgeName="t016",targetState="doPlan",cond=whenDispatch("plannerTask"))
					transition(edgeName="t017",targetState="doPlan",cond=whenDispatch("plannerCmd"))
				}	 
				state("okPlan") { //this:State
					action { //it:State
						forward("executePlanningProject", "executePlanningProject(${payloadArg(0)})" ,"planner" ) 
					}
					 transition( edgeName="goto",targetState="doPlan", cond=doswitch() )
				}	 
				state("doPlan") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("plannerTask(X)"), Term.createTerm("plannerTask(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.roomState.updateState( "${payloadArg(0)}"  )
								forward("robotAction", "robotAction(${payloadArg(0)})" ,"basicrobot" ) 
								forward("requestNextMove", "requestNextMove(${payloadArg(0)})" ,"planner" ) 
						}
						if( checkMsgContent( Term.createTerm("plannerCmd(X)"), Term.createTerm("plannerCmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("robotCmd", "robotCmd(${payloadArg(0)})" ,"basicrobot" ) 
						}
						if( checkMsgContent( Term.createTerm("ackMsg(X)"), Term.createTerm("ackMsg(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("registerAck", "registerAck(${payloadArg(0)})" ,"planner" ) 
						}
						if( checkMsgContent( Term.createTerm("removeFromFridge(FOOD_ID,QT)"), Term.createTerm("removeFromFridge(FOOD_ID,QT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("removeFromFridge", "removeFromFridge(${payloadArg(0)},${payloadArg(1)})" ,"externalcomunicator" ) 
						}
						if( checkMsgContent( Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("addToFridge", "addToFridge(${payloadArg(0)}," + "\"${payloadArg(1)}\",${payloadArg(2)})" ,"externalcomunicator" ) 
						}
					}
					 transition(edgeName="t018",targetState="doPlan",cond=whenDispatch("plannerTask"))
					transition(edgeName="t019",targetState="doPlan",cond=whenDispatch("plannerCmd"))
					transition(edgeName="t020",targetState="doPlan",cond=whenDispatch("ackMsg"))
					transition(edgeName="t021",targetState="waitCmd",cond=whenDispatch("endTaskEventCmd"))
					transition(edgeName="t022",targetState="stopped",cond=whenEvent("alarm"))
					transition(edgeName="t023",targetState="doPlan",cond=whenDispatch("removeFromFridge"))
					transition(edgeName="t024",targetState="doPlan",cond=whenDispatch("addToFridge"))
				}	 
				state("sendMaitreWarning") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("foodUnavailable(X)"), Term.createTerm("foodUnavailable(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("maitreWarning", "maitreWarning(${payloadArg(0)})" ,"frontend" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("stopped") { //this:State
					action { //it:State
					}
					 transition(edgeName="t025",targetState="resuming",cond=whenEvent("situationUnderControl"))
				}	 
				state("resuming") { //this:State
					action { //it:State
						forward("requestNextMove", "requestNextMove(X)" ,"planner" ) 
					}
					 transition( edgeName="goto",targetState="doPlan", cond=doswitch() )
				}	 
			}
		}
}
