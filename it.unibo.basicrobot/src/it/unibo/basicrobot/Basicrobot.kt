/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('basicRobotConfig.pl')","") //set resVar	
						solve("robot(R,PORT)","") //set resVar	
						if(currentSolution.isSuccess()) { println("USING ROBOT : ${getCurSol("R")},  port= ${getCurSol("PORT")} ")
						 }
						else
						{ println("no robot")
						 }
						if(currentSolution.isSuccess()) { itunibo.robot.robotSupport.create(myself ,getCurSol("R").toString(), getCurSol("PORT").toString() )
						itunibo.robot.plannerBhestie.create(myself)
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="handleUserCmd",cond=whenEvent("userCmd"))
					transition(edgeName="t01",targetState="handleUserCmd",cond=whenDispatch("robotCmd"))
					transition(edgeName="t02",targetState="handleMaitreCmd",cond=whenEvent("maitreCmd"))
				}	 
				state("handleUserCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("robotCmd(CMD)"), Term.createTerm("robotCmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})"  )
						}
						if( checkMsgContent( Term.createTerm("userCmd(X)"), Term.createTerm("userCmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})"  )
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleMaitreCmd") { //this:State
					action { //it:State
						println("I'M IN HANDLEMAITRECMD STATE")
						if( checkMsgContent( Term.createTerm("maitreCmd(X)"), Term.createTerm("maitreCmd(ACTION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("I'M EXECUTING ACTION FROM HANDLEMAITRECMD")
								itunibo.robot.plannerBhestie.action( "msg(${payloadArg(0)})"  )
								itunibo.robot.plannerBhestie.requestNextMove(  )
						}
					}
					 transition(edgeName="t03",targetState="progressPlanner",cond=whenEvent("plannerCmd"))
				}	 
				state("progressPlanner") { //this:State
					action { //it:State
						println("I'M IN PROGRESS PLANNER STATE")
						if( checkMsgContent( Term.createTerm("plannerCmd(X)"), Term.createTerm("plannerCmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.robotSupport.move( "msg(${payloadArg(0)})"  )
								itunibo.robot.robotSupport.waitAck(  )
						}
						if( checkMsgContent( Term.createTerm("ackMsg(X)"), Term.createTerm("ackMsg(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.robot.plannerBhestie.registerAck( "${payloadArg(0)}"  )
								itunibo.robot.plannerBhestie.requestNextMove(  )
						}
					}
					 transition(edgeName="t04",targetState="stopped",cond=whenEvent("alarm"))
					transition(edgeName="t05",targetState="progressPlanner",cond=whenEvent("plannerCmd"))
					transition(edgeName="t06",targetState="progressPlanner",cond=whenEvent("ackMsg"))
					transition(edgeName="t07",targetState="waitCmd",cond=whenEvent("endTaskEventCmd"))
				}	 
				state("stopped") { //this:State
					action { //it:State
					}
					 transition(edgeName="t08",targetState="resuming",cond=whenEvent("situationUnderControl"))
				}	 
				state("resuming") { //this:State
					action { //it:State
						itunibo.robot.plannerBhestie.requestNextMove(  )
					}
					 transition(edgeName="t09",targetState="progressPlanner",cond=whenEvent("plannerCmd"))
				}	 
			}
		}
}
