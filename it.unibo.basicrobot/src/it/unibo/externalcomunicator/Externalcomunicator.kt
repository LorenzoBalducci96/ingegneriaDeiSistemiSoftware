/* Generated by AN DISI Unibo */ 
package it.unibo.externalcomunicator

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Externalcomunicator ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.comunicationMessageClient.comunicationMessageClient.init(myself)
					}
					 transition( edgeName="goto",targetState="handleMsg", cond=doswitch() )
				}	 
				state("handleMsg") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fridgeRequest(X)"), Term.createTerm("fridgeRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.comunicationMessageClient.comunicationMessageClient.requestFoodList( "msg(${payloadArg(0)})"  )
						}
						if( checkMsgContent( Term.createTerm("recvFoodMsgEvent(X)"), Term.createTerm("recvFoodMsgEvent(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("recvFoodMsgEvent", "recvFoodMsgEvent(" + "\"${payloadArg(0)}\")" ,"robotmind" ) 
						}
						if( checkMsgContent( Term.createTerm("foodAvailable(X)"), Term.createTerm("foodAvailable(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("foodAvailable", "foodAvailable(${payloadArg(0)})" ,"robotmind" ) 
						}
						if( checkMsgContent( Term.createTerm("foodUnavailable(X)"), Term.createTerm("foodUnavailable(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("foodUnavailable", "foodUnavailable(${payloadArg(0)})" ,"robotmind" ) 
						}
						if( checkMsgContent( Term.createTerm("removeFromFridge(FOOD_ID,QT)"), Term.createTerm("removeFromFridge(FOOD_ID,QT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.comunicationMessageClient.comunicationMessageClient.removeFromFridge( "${payloadArg(0)}", "${payloadArg(1)}"  )
						}
						if( checkMsgContent( Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), Term.createTerm("addToFridge(FOOD_ID,DESCRIPTION,QT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.comunicationMessageClient.comunicationMessageClient.addToFridge( "${payloadArg(0)}", "${payloadArg(1)}", "${payloadArg(2)}"  )
						}
					}
					 transition(edgeName="t00",targetState="handleMsg",cond=whenDispatch("fridgeRequest"))
					transition(edgeName="t01",targetState="handleMsg",cond=whenDispatch("recvFoodMsgEvent"))
					transition(edgeName="t02",targetState="handleMsg",cond=whenDispatch("foodAvailable"))
					transition(edgeName="t03",targetState="handleMsg",cond=whenDispatch("foodUnavailable"))
					transition(edgeName="t04",targetState="handleMsg",cond=whenDispatch("removeFromFridge"))
					transition(edgeName="t05",targetState="handleMsg",cond=whenDispatch("addToFridge"))
				}	 
			}
		}
}
